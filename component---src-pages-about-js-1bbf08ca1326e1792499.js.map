{"version":3,"sources":["webpack:///./src/pages/fragments/about-fragment.js","webpack:///./src/pages/about.js","webpack:///./src/components/cardtext.js","webpack:///./src/components/card.js"],"names":["FragAbout","class","_","require","About","data","items","sampleSize","allGalleryJson","edges","imgName","altText","title","map","id","node","cardId","query","CardText","keyText","render","content","allMarkdownRemark","find","edge","frontmatter","key","dangerouslySetInnerHTML","__html","excerpt","className","Card","to","fluid","src","childImageSharp","alt"],"mappings":"sOAuCeA,EArCG,kBAChB,gDACE,uDACA,0eASA,geASA,4YAOA,sHAGE,mCACA,gCAAMC,MAAM,aAAZ,wB,YCxBAC,EAAIC,EAAQ,QAEH,SAASC,EAAT,GAA0B,IAATC,EAAQ,EAARA,KACxBC,EAAQJ,EAAEK,WAAWF,EAAKG,eAAeC,MAAO,IACtD,OACE,wBAAC,IAAD,CAAQC,QAAQ,mBAAmBC,QAAQ,qBACzC,wBAAC,IAAD,CAAKC,MAAM,aACX,+BAAKX,MAAM,mBACT,+BAAKA,MAAM,OACT,+BAAKA,MAAM,aACT,wBAAC,EAAD,OAEF,+BAAKA,MAAM,aACT,wBAAC,IAAD,QAGJ,+BAAKA,MAAM,OACT,+BAAKA,MAAM,OACT,+BAAKA,MAAM,sDACRK,EAAMO,KAAI,YAAe,IAChBC,EADe,EAAXC,KACJD,GACR,OAAO,wBAAC,IAAD,CAAME,OAAQF,YAU9B,IAAMG,EAAK,c,mFCFHC,EAnCE,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACf,wBAAC,cAAD,CACEF,MAAK,aAeLG,OAAQ,SAAAf,GACN,IAAMgB,EAAUhB,EAAKiB,kBAAkBb,MAAMc,MAC3C,SAAAC,GAAI,OAAIA,EAAKT,KAAKU,YAAYC,MAAQP,KAExC,OACE,6BACEQ,wBAAyB,CAAEC,OAAQP,EAAQN,KAAKc,SAChDC,UAAU,kBC0CLC,IAhEF,SAAC,GAAD,IAAGf,EAAH,EAAGA,OAAH,OACX,wBAAC,cAAD,CACEC,MAAK,YAuBLG,OAAQ,SAAAf,GACN,IAAMgB,EAAUhB,EAAKG,eAAeC,MAAMc,MACxC,SAAAC,GAAI,OAAIA,EAAKT,KAAKD,KAAOE,KAE3B,OAAKK,EAIH,+BAAKpB,MAAM,QACT,+BAAKA,MAAM,kBACT,+BAAKA,MAAM,aACT,wBAAC,OAAD,CAAM+B,GAAG,aACP,wBAAC,IAAD,CACEC,MAAOZ,EAAQN,KAAKmB,IAAIC,gBAAgBF,MACxCG,IAAKf,EAAQN,KAAKqB,QAIxB,+BAAKnC,MAAM,SACT,+BAAKA,MAAM,aACT,8BAAIA,MAAM,cACR,wBAAC,OAAD,CAAM+B,GAAG,YAAYF,UAAU,cAC5BT,EAAQN,KAAKH,QAGlB,wBAAC,EAAD,CAAUO,QAASE,EAAQN,KAAKW,UApBjC,+BAAKzB,MAAM,cAAX","file":"component---src-pages-about-js-1bbf08ca1326e1792499.js","sourcesContent":["import React from \"react\"\r\n\r\nconst FragAbout = () => (\r\n  <>\r\n    <h1>About C &amp; S Games</h1>\r\n    <p>\r\n      Charlie and Sara began building Cornhole games when they saw that a friend\r\n      had a set. With Charlie being the craftsman that he is, he had the\r\n      materials, knowledge, tools and the passion to build a superior Cornhole\r\n      game. Charlie set out to do just that... and he did! While Charlie was\r\n      busy perfecting his Cornhole game design, Sara got busy with her sewing\r\n      machine and developed a fashionable and durable Cornhole bag to go along\r\n      with Charlie's design.\r\n    </p>\r\n    <p>\r\n      Their new Cornhole games, complete with a set of rules, were initially\r\n      used as gifts to family members and friends. That's when the word started\r\n      to spread. Charlie and Sara began receiving phone calls from strangers\r\n      telling their stories of how they were playing Cornhole at someone's house\r\n      and wanted to know who made such great games. Charlie and Sara quickly\r\n      learned that they had a great product on their hand, and they became C\r\n      &amp; S Games.\r\n    </p>\r\n    <p>\r\n      Nowadays, you'll find Charlie in his workshop working constantly building\r\n      Cornhole games, and Sara is still fast at work on the sewing machine\r\n      making bags. Their commitment to excellence and ensuring that each game\r\n      they sell adheres to strict American Cornhole Association standards has\r\n      enabled Charlie and Sara to develop a customer base from coast to coast.\r\n    </p>\r\n    <p>\r\n      \"We hope that you will enjoy playing these games as much as we enjoy\r\n      making them!\"\r\n      <br />\r\n      <span class=\"signature\"> - Charlie &amp; Sara</span>\r\n    </p>\r\n  </>\r\n)\r\n\r\nexport default FragAbout\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport SEO from \"../components/seo\"\r\nimport Layout from \"../components/layout\"\r\nimport Card from \"../components/card\"\r\n\r\nimport FragAbout from \"./fragments/about-fragment\"\r\nimport QuoteForm from \"../components/quoteform\"\r\n\r\nconst _ = require(\"lodash\")\r\n\r\nexport default function About({ data }) {\r\n  const items = _.sampleSize(data.allGalleryJson.edges, 10)\r\n  return (\r\n    <Layout imgName=\"banner_about.jpg\" altText=\"About C &amp; S Games\">\r\n      <SEO title=\"About Us\" />\r\n      <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n          <div class=\"col col-8\">\r\n            <FragAbout />\r\n          </div>\r\n          <div class=\"col col-4\">\r\n            <QuoteForm />\r\n          </div>\r\n        </div>\r\n        <div class=\"row\">\r\n          <div class=\"col\">\r\n            <div class=\"csg-card-deck-scrollable flex-nowrap overflow-auto\">\r\n              {items.map(({ node }) => {\r\n                const { id } = node\r\n                return <Card cardId={id} />\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allGalleryJson(filter: { card: { eq: \"true\" } }) {\r\n      edges {\r\n        node {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst CardText = ({ keyText }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        allMarkdownRemark {\r\n          edges {\r\n            node {\r\n              excerpt(format: HTML, pruneLength: 150)\r\n              html\r\n              frontmatter {\r\n                key\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      const content = data.allMarkdownRemark.edges.find(\r\n        edge => edge.node.frontmatter.key === keyText\r\n      )\r\n      return (\r\n        <p\r\n          dangerouslySetInnerHTML={{ __html: content.node.excerpt }}\r\n          className=\"card-text\"\r\n        />\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nCardText.propTypes = {\r\n  keyText: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default CardText\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql, Link } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\nimport PropTypes from \"prop-types\"\r\nimport CardText from \"./cardtext\"\r\n\r\nconst Card = ({ cardId }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        allGalleryJson(filter: { card: { eq: \"true\" } }) {\r\n          edges {\r\n            node {\r\n              id\r\n              key\r\n              title\r\n              alt\r\n              name\r\n              src {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 125) {\r\n                    ...GatsbyImageSharpFluid\r\n                    ...GatsbyImageSharpFluidLimitPresentationSize\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      const content = data.allGalleryJson.edges.find(\r\n        edge => edge.node.id === cardId\r\n      )\r\n      if (!content) {\r\n        return <div class=\"no-content\">No Content</div>\r\n      }\r\n      return (\r\n        <div class=\"card\">\r\n          <div class=\"row no-gutters\">\r\n            <div class=\"col-3 p-3\">\r\n              <Link to=\"/products\">\r\n                <Img\r\n                  fluid={content.node.src.childImageSharp.fluid}\r\n                  alt={content.node.alt}\r\n                />\r\n              </Link>\r\n            </div>\r\n            <div class=\"col-9\">\r\n              <div class=\"card-body\">\r\n                <h4 class=\"card-title\">\r\n                  <Link to=\"/products\" className=\"text-white\">\r\n                    {content.node.title}\r\n                  </Link>\r\n                </h4>\r\n                <CardText keyText={content.node.key} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nCard.propTypes = {\r\n  cardId: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Card\r\n"],"sourceRoot":""}