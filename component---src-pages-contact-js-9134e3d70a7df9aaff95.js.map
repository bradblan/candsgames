{"version":3,"sources":["webpack:///./src/components/image.js","webpack:///./src/pages/fragments/contact-fragment.js","webpack:///./src/pages/contact.js","webpack:///./src/components/cardtext.js","webpack:///./src/components/card.js","webpack:///./src/components/cornholegames.js"],"names":["Image","data","useStaticQuery","placeholderImage","childImageSharp","fluid","className","alt","FragContact","query","render","site","siteMetadata","phone","_","require","Home","items","sampleSize","allGalleryJson","edges","imgName","altText","title","class","map","id","node","cardId","CardText","keyText","content","allMarkdownRemark","find","edge","frontmatter","key","dangerouslySetInnerHTML","__html","excerpt","Card","to","src","CornholeGamesImage","fixed"],"mappings":"uQA0CeA,EA3BD,WAAO,IAAD,IACZC,EAAOC,yBAAe,cAa5B,OAAKD,SAAD,UAACA,EAAME,wBAAP,iBAAC,EAAwBC,uBAAzB,aAAC,EAAyCC,OAK5C,wBAAC,IAAD,CACEA,MAAOJ,EAAKE,iBAAiBC,gBAAgBC,MAC7CC,UAAU,kBACVC,IAAI,8BAPC,yDCGIC,EA7BK,kBAClB,wBAAC,cAAD,CACEC,MAAK,aASLC,OAAQ,SAAAT,GACN,OACE,gDACE,yEACA,sDACqBA,EAAKU,KAAKC,aAAaC,MAD5C,8PAOA,wBAAC,EAAD,W,wBCfJC,EAAIC,EAAQ,QAEH,SAASC,EAAT,GAAyB,IAATf,EAAQ,EAARA,KACvBgB,EAAQH,EAAEI,WAAWjB,EAAKkB,eAAeC,MAAO,IACtD,OACE,wBAAC,IAAD,CACEC,QAAQ,qBACRC,QAAQ,iDAER,wBAAC,IAAD,CAAKC,MAAM,eACX,+BAAKC,MAAM,mBACT,+BAAKA,MAAM,OACT,+BAAKA,MAAM,aACT,wBAAC,EAAD,OAEF,+BAAKA,MAAM,aACT,wBAAC,IAAD,MACA,+BAAKA,MAAM,qBACT,wBAAC,IAAD,SAIN,+BAAKA,MAAM,YACT,+BAAKA,MAAM,OACT,+BAAKA,MAAM,sDACRP,EAAMQ,KAAI,YAAe,IAChBC,EADe,EAAXC,KACJD,GACR,OAAO,wBAAC,IAAD,CAAME,OAAQF,YAU9B,IAAMjB,EAAK,c,mFCTHoB,EAnCE,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACf,wBAAC,cAAD,CACErB,MAAK,aAeLC,OAAQ,SAAAT,GACN,IAAM8B,EAAU9B,EAAK+B,kBAAkBZ,MAAMa,MAC3C,SAAAC,GAAI,OAAIA,EAAKP,KAAKQ,YAAYC,MAAQN,KAExC,OACE,6BACEO,wBAAyB,CAAEC,OAAQP,EAAQJ,KAAKY,SAChDjC,UAAU,kBC0CLkC,IAhEF,SAAC,GAAD,IAAGZ,EAAH,EAAGA,OAAH,OACX,wBAAC,cAAD,CACEnB,MAAK,YAuBLC,OAAQ,SAAAT,GACN,IAAM8B,EAAU9B,EAAKkB,eAAeC,MAAMa,MACxC,SAAAC,GAAI,OAAIA,EAAKP,KAAKD,KAAOE,KAE3B,OAAKG,EAIH,+BAAKP,MAAM,QACT,+BAAKA,MAAM,kBACT,+BAAKA,MAAM,aACT,wBAAC,OAAD,CAAMiB,GAAG,aACP,wBAAC,IAAD,CACEpC,MAAO0B,EAAQJ,KAAKe,IAAItC,gBAAgBC,MACxCE,IAAKwB,EAAQJ,KAAKpB,QAIxB,+BAAKiB,MAAM,SACT,+BAAKA,MAAM,aACT,8BAAIA,MAAM,cACR,wBAAC,OAAD,CAAMiB,GAAG,YAAYnC,UAAU,cAC5ByB,EAAQJ,KAAKJ,QAGlB,wBAAC,EAAD,CAAUO,QAASC,EAAQJ,KAAKS,UApBjC,+BAAKZ,MAAM,cAAX,mB,kCCpCf,iDA8BemB,IA1BY,WAAO,IAAD,IACzB1C,EAAOC,yBAAe,cAY5B,OAAKD,SAAD,UAACA,EAAME,wBAAP,iBAAC,EAAwBC,uBAAzB,aAAC,EAAyCwC,OAK5C,wBAAC,IAAD,CACEA,MAAO3C,EAAKE,iBAAiBC,gBAAgBwC,MAC7CtC,UAAU,0BACVC,IAAI,qBAPC","file":"component---src-pages-contact-js-9134e3d70a7df9aaff95.js","sourcesContent":["import React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\n/*\r\n * This component is built using `gatsby-image` to automatically serve optimized\r\n * images with lazy loading and reduced file sizes. The image is loaded using a\r\n * `useStaticQuery`, which allows us to load the image from directly within this\r\n * component, rather than having to pass the image data down from pages.\r\n *\r\n * For more information, see the docs:\r\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\r\n * - `useStaticQuery`: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nconst Image = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      placeholderImage: file(relativePath: { eq: \"charlie_sara.jpg\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 450) {\r\n            ...GatsbyImageSharpFluid\r\n            ...GatsbyImageSharpFluidLimitPresentationSize\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  if (!data?.placeholderImage?.childImageSharp?.fluid) {\r\n    return <div>Picture not found</div>\r\n  }\r\n\r\n  return (\r\n    <Img\r\n      fluid={data.placeholderImage.childImageSharp.fluid}\r\n      className=\"contact-picture\"\r\n      alt=\"Charlie and Sara Flaugher\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Image\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport Image from \"../../components/image\"\r\n\r\nconst FragContact = () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            phone\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      return (\r\n        <>\r\n          <h1>We Look Forward to Hearing from You</h1>\r\n          <p>\r\n            Please call us at {data.site.siteMetadata.phone} to place your\r\n            order. We accept all major credit cards. If you're unsure of the\r\n            product you are looking for, please take a moment to fill out our\r\n            free custom quote form on the right, and we'll get to work on\r\n            finding the perfect Cornhole game for you.\r\n          </p>\r\n          <Image />\r\n        </>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nexport default FragContact\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport SEO from \"../components/seo\"\r\nimport Layout from \"../components/layout\"\r\nimport Card from \"../components/card\"\r\n\r\nimport FragContact from \"./fragments/contact-fragment\"\r\nimport QuoteForm from \"../components/quoteform\"\r\nimport CornholeGamesImage from \"../components/cornholegames\"\r\n\r\nconst _ = require(\"lodash\")\r\n\r\nexport default function Home({ data }) {\r\n  const items = _.sampleSize(data.allGalleryJson.edges, 10)\r\n  return (\r\n    <Layout\r\n      imgName=\"banner_contact.jpg\"\r\n      altText=\"Visit the gallery to see more of our products\"\r\n    >\r\n      <SEO title=\"Contact Us\" />\r\n      <div class=\"container-fluid\">\r\n        <div class=\"row\">\r\n          <div class=\"col col-8\">\r\n            <FragContact />\r\n          </div>\r\n          <div class=\"col col-4\">\r\n            <QuoteForm />\r\n            <div class=\"circle-image mt-5\">\r\n              <CornholeGamesImage />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"row mt-3\">\r\n          <div class=\"col\">\r\n            <div class=\"csg-card-deck-scrollable flex-nowrap overflow-auto\">\r\n              {items.map(({ node }) => {\r\n                const { id } = node\r\n                return <Card cardId={id} />\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allGalleryJson(filter: { card: { eq: \"true\" } }) {\r\n      edges {\r\n        node {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst CardText = ({ keyText }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        allMarkdownRemark {\r\n          edges {\r\n            node {\r\n              excerpt(format: HTML, pruneLength: 150)\r\n              html\r\n              frontmatter {\r\n                key\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      const content = data.allMarkdownRemark.edges.find(\r\n        edge => edge.node.frontmatter.key === keyText\r\n      )\r\n      return (\r\n        <p\r\n          dangerouslySetInnerHTML={{ __html: content.node.excerpt }}\r\n          className=\"card-text\"\r\n        />\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nCardText.propTypes = {\r\n  keyText: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default CardText\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql, Link } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\nimport PropTypes from \"prop-types\"\r\nimport CardText from \"./cardtext\"\r\n\r\nconst Card = ({ cardId }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        allGalleryJson(filter: { card: { eq: \"true\" } }) {\r\n          edges {\r\n            node {\r\n              id\r\n              key\r\n              title\r\n              alt\r\n              name\r\n              src {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 125) {\r\n                    ...GatsbyImageSharpFluid\r\n                    ...GatsbyImageSharpFluidLimitPresentationSize\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      const content = data.allGalleryJson.edges.find(\r\n        edge => edge.node.id === cardId\r\n      )\r\n      if (!content) {\r\n        return <div class=\"no-content\">No Content</div>\r\n      }\r\n      return (\r\n        <div class=\"card\">\r\n          <div class=\"row no-gutters\">\r\n            <div class=\"col-3 p-3\">\r\n              <Link to=\"/products\">\r\n                <Img\r\n                  fluid={content.node.src.childImageSharp.fluid}\r\n                  alt={content.node.alt}\r\n                />\r\n              </Link>\r\n            </div>\r\n            <div class=\"col-9\">\r\n              <div class=\"card-body\">\r\n                <h4 class=\"card-title\">\r\n                  <Link to=\"/products\" className=\"text-white\">\r\n                    {content.node.title}\r\n                  </Link>\r\n                </h4>\r\n                <CardText keyText={content.node.key} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nCard.propTypes = {\r\n  cardId: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Card\r\n","import React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\nconst CornholeGamesImage = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      placeholderImage: file(relativePath: { eq: \"cornhole_games.jpg\" }) {\r\n        childImageSharp {\r\n          fixed(width: 300) {\r\n            ...GatsbyImageSharpFixed\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  if (!data?.placeholderImage?.childImageSharp?.fixed) {\r\n    return <div>Picture not found</div>\r\n  }\r\n\r\n  return (\r\n    <Img\r\n      fixed={data.placeholderImage.childImageSharp.fixed}\r\n      className=\"float-right image-fluid\"\r\n      alt=\"Cornhole Charlie\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default CornholeGamesImage\r\n"],"sourceRoot":""}