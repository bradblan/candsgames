{"version":3,"sources":["webpack:///./src/components/productcardtext.js","webpack:///./src/components/productcard.js","webpack:///./src/pages/products.js"],"names":["ProductCardText","keyText","query","render","data","content","allMarkdownRemark","edges","find","edge","node","frontmatter","key","class","to","title","dangerouslySetInnerHTML","__html","excerpt","className","ProductCard","cardId","allGalleryJson","id","fluid","src","childImageSharp","alt","Products","imgName","altText","map","product"],"mappings":"0PAkDeA,EA9CS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACtB,wBAAC,cAAD,CACEC,MAAK,aAgBLC,OAAQ,SAAAC,GACN,IAAMC,EAAUD,EAAKE,kBAAkBC,MAAMC,MAC3C,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,MAAQX,KAExC,OACE,+BAAKY,MAAM,aACT,8BAAIA,MAAM,wCACR,wBAAC,OAAD,CACEC,GAAI,aAAeT,EAAQK,KAAKC,YAAYC,IAC5CG,MAAM,qBAELV,EAAQK,KAAKC,YAAYI,QAG9B,6BACEC,wBAAyB,CAAEC,OAAQZ,EAAQK,KAAKQ,SAChDC,UAAU,mBCwBPC,EAxDK,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAClB,wBAAC,cAAD,CACEnB,MAAK,aAuBLC,OAAQ,SAAAC,GACN,IAAMC,EAAUD,EAAKkB,eAAef,MAAMC,MACxC,SAAAC,GAAI,OAAIA,EAAKC,KAAKa,KAAOF,KAE3B,OAAKhB,EAIH,+BAAKQ,MAAM,iBACT,+BAAKA,MAAM,yBACT,wBAAC,OAAD,CACEC,GAAI,aAAeT,EAAQK,KAAKE,IAChCG,MAAM,qBAEN,wBAAC,IAAD,CACES,MAAOnB,EAAQK,KAAKe,IAAIC,gBAAgBF,MACxCG,IAAKtB,EAAQK,KAAKiB,OAGtB,wBAAC,EAAD,CAAiB1B,QAASI,EAAQK,KAAKE,QAdpC,+BAAKC,MAAM,cAAX,kBC7BA,SAASe,EAAT,GAA6B,IAATxB,EAAQ,EAARA,KACjC,OACE,wBAAC,IAAD,CACEyB,QAAQ,qBACRC,QAAQ,qCAER,wBAAC,IAAD,CAAKf,MAAM,aACX,+BAAKF,MAAM,mBACT,+BAAKA,MAAM,aACT,+BAAKA,MAAM,4BACRT,EAAKkB,eAAef,MAAMwB,KAAI,SAAAC,GAAO,OACpC,+BAAKnB,MAAM,YACT,wBAAC,EAAD,CAAaQ,OAAQW,EAAQtB,KAAKa,aAU3C,IAAMrB,EAAK","file":"component---src-pages-products-js-3cc223b0d07f04fadd13.js","sourcesContent":["import React from \"react\"\r\nimport { Link, StaticQuery, graphql } from \"gatsby\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nconst ProductCardText = ({ keyText }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        allMarkdownRemark {\r\n          edges {\r\n            node {\r\n              excerpt(format: HTML, pruneLength: 180)\r\n              html\r\n              frontmatter {\r\n                key\r\n                title\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      const content = data.allMarkdownRemark.edges.find(\r\n        edge => edge.node.frontmatter.key === keyText\r\n      )\r\n      return (\r\n        <div class=\"card-body\">\r\n          <h3 class=\"card-title product-title text-center\">\r\n            <Link\r\n              to={\"/products/\" + content.node.frontmatter.key}\r\n              title=\"Click to see more\"\r\n            >\r\n              {content.node.frontmatter.title}\r\n            </Link>\r\n          </h3>\r\n          <p\r\n            dangerouslySetInnerHTML={{ __html: content.node.excerpt }}\r\n            className=\"card-text\"\r\n          />\r\n        </div>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nProductCardText.propTypes = {\r\n  keyText: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default ProductCardText\r\n","import React from \"react\"\r\nimport { StaticQuery, graphql, Link } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\nimport PropTypes from \"prop-types\"\r\nimport ProductCardText from \"./productcardtext\"\r\n\r\nconst ProductCard = ({ cardId }) => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query {\r\n        allGalleryJson(filter: { featured: { eq: true } }) {\r\n          edges {\r\n            node {\r\n              id\r\n              key\r\n              title\r\n              alt\r\n              name\r\n              src {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 125) {\r\n                    ...GatsbyImageSharpFluid\r\n                    ...GatsbyImageSharpFluidLimitPresentationSize\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => {\r\n      const content = data.allGalleryJson.edges.find(\r\n        edge => edge.node.id === cardId\r\n      )\r\n      if (!content) {\r\n        return <div class=\"no-content\">No Content</div>\r\n      }\r\n      return (\r\n        <div class=\"card border-0\">\r\n          <div class=\"img-top product-image\">\r\n            <Link\r\n              to={\"/products/\" + content.node.key}\r\n              title=\"Click to see more\"\r\n            >\r\n              <Img\r\n                fluid={content.node.src.childImageSharp.fluid}\r\n                alt={content.node.alt}\r\n              />\r\n            </Link>\r\n            <ProductCardText keyText={content.node.key} />\r\n          </div>\r\n        </div>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nProductCard.propTypes = {\r\n  cardId: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default ProductCard\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport SEO from \"../components/seo\"\r\nimport Layout from \"../components/layout\"\r\nimport ProductCard from \"../components/productcard\"\r\n\r\nexport default function Products({ data }) {\r\n  return (\r\n    <Layout\r\n      imgName=\"banner_product.jpg\"\r\n      altText=\"Our games are great for the beach\"\r\n    >\r\n      <SEO title=\"Products\" />\r\n      <div class=\"container-fluid\">\r\n        <div class=\"container\">\r\n          <div class=\"card-deck row row-cols-3\">\r\n            {data.allGalleryJson.edges.map(product => (\r\n              <div class=\"col mb-4\">\r\n                <ProductCard cardId={product.node.id} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allGalleryJson(\r\n      filter: { featured: { eq: true } }\r\n      sort: { fields: aspect, order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          alt\r\n          id\r\n          key\r\n          name\r\n          title\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}